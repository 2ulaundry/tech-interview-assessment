generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Invoice {
  id                Int             @id @default(autoincrement())
  invoiceNumber     String          @map(name: "invoice_number")
  total             Decimal         @map(name: "total")
  currency          InvoiceCurrency @default(USD) @map(name: "currency")
  invoiceDate       DateTime?       @map(name: "invoice_date") @default(now())
  dueDate           DateTime?       @map(name: "due_date") @default(now())
  vendorName        String?          @map(name: "vendor_name")
  remittanceAddress String?          @map(name: "remittance_address")
  userId            Int             @map("user_id")
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  status            InvoiceStatus   @default(pending)

  @@map("invoices")
}

enum InvoiceCurrency {
  USD
}

enum InvoiceStatus {
  pending
  approved
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  invoices      Invoice[]
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
